// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"myetc.lantron.ltd/m/ent/etcrecord"
	"myetc.lantron.ltd/m/ent/predicate"
)

// ETCRecordUpdate is the builder for updating ETCRecord entities.
type ETCRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *ETCRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ETCRecordUpdate builder.
func (eru *ETCRecordUpdate) Where(ps ...predicate.ETCRecord) *ETCRecordUpdate {
	eru.mutation.Where(ps...)
	return eru
}

// SetUsername sets the "username" field.
func (eru *ETCRecordUpdate) SetUsername(s string) *ETCRecordUpdate {
	eru.mutation.SetUsername(s)
	return eru
}

// SetEntry sets the "entry" field.
func (eru *ETCRecordUpdate) SetEntry(s string) *ETCRecordUpdate {
	eru.mutation.SetEntry(s)
	return eru
}

// SetEntryYear sets the "entry_year" field.
func (eru *ETCRecordUpdate) SetEntryYear(i int32) *ETCRecordUpdate {
	eru.mutation.ResetEntryYear()
	eru.mutation.SetEntryYear(i)
	return eru
}

// AddEntryYear adds i to the "entry_year" field.
func (eru *ETCRecordUpdate) AddEntryYear(i int32) *ETCRecordUpdate {
	eru.mutation.AddEntryYear(i)
	return eru
}

// SetEntryMonth sets the "entry_month" field.
func (eru *ETCRecordUpdate) SetEntryMonth(i int32) *ETCRecordUpdate {
	eru.mutation.ResetEntryMonth()
	eru.mutation.SetEntryMonth(i)
	return eru
}

// AddEntryMonth adds i to the "entry_month" field.
func (eru *ETCRecordUpdate) AddEntryMonth(i int32) *ETCRecordUpdate {
	eru.mutation.AddEntryMonth(i)
	return eru
}

// SetEntryDay sets the "entry_day" field.
func (eru *ETCRecordUpdate) SetEntryDay(i int32) *ETCRecordUpdate {
	eru.mutation.ResetEntryDay()
	eru.mutation.SetEntryDay(i)
	return eru
}

// AddEntryDay adds i to the "entry_day" field.
func (eru *ETCRecordUpdate) AddEntryDay(i int32) *ETCRecordUpdate {
	eru.mutation.AddEntryDay(i)
	return eru
}

// SetExit sets the "exit" field.
func (eru *ETCRecordUpdate) SetExit(s string) *ETCRecordUpdate {
	eru.mutation.SetExit(s)
	return eru
}

// SetExitDate sets the "exit_date" field.
func (eru *ETCRecordUpdate) SetExitDate(s string) *ETCRecordUpdate {
	eru.mutation.SetExitDate(s)
	return eru
}

// SetExitTime sets the "exit_time" field.
func (eru *ETCRecordUpdate) SetExitTime(s string) *ETCRecordUpdate {
	eru.mutation.SetExitTime(s)
	return eru
}

// SetTotalPrice sets the "total_price" field.
func (eru *ETCRecordUpdate) SetTotalPrice(i int32) *ETCRecordUpdate {
	eru.mutation.ResetTotalPrice()
	eru.mutation.SetTotalPrice(i)
	return eru
}

// AddTotalPrice adds i to the "total_price" field.
func (eru *ETCRecordUpdate) AddTotalPrice(i int32) *ETCRecordUpdate {
	eru.mutation.AddTotalPrice(i)
	return eru
}

// SetDiscountPrice sets the "discount_price" field.
func (eru *ETCRecordUpdate) SetDiscountPrice(i int32) *ETCRecordUpdate {
	eru.mutation.ResetDiscountPrice()
	eru.mutation.SetDiscountPrice(i)
	return eru
}

// AddDiscountPrice adds i to the "discount_price" field.
func (eru *ETCRecordUpdate) AddDiscountPrice(i int32) *ETCRecordUpdate {
	eru.mutation.AddDiscountPrice(i)
	return eru
}

// SetPaidPrice sets the "paid_price" field.
func (eru *ETCRecordUpdate) SetPaidPrice(i int32) *ETCRecordUpdate {
	eru.mutation.ResetPaidPrice()
	eru.mutation.SetPaidPrice(i)
	return eru
}

// AddPaidPrice adds i to the "paid_price" field.
func (eru *ETCRecordUpdate) AddPaidPrice(i int32) *ETCRecordUpdate {
	eru.mutation.AddPaidPrice(i)
	return eru
}

// SetCarType sets the "car_type" field.
func (eru *ETCRecordUpdate) SetCarType(i int8) *ETCRecordUpdate {
	eru.mutation.ResetCarType()
	eru.mutation.SetCarType(i)
	return eru
}

// AddCarType adds i to the "car_type" field.
func (eru *ETCRecordUpdate) AddCarType(i int8) *ETCRecordUpdate {
	eru.mutation.AddCarType(i)
	return eru
}

// SetCarNumber sets the "car_number" field.
func (eru *ETCRecordUpdate) SetCarNumber(s string) *ETCRecordUpdate {
	eru.mutation.SetCarNumber(s)
	return eru
}

// SetCardNumber sets the "card_number" field.
func (eru *ETCRecordUpdate) SetCardNumber(s string) *ETCRecordUpdate {
	eru.mutation.SetCardNumber(s)
	return eru
}

// SetStatus sets the "status" field.
func (eru *ETCRecordUpdate) SetStatus(s string) *ETCRecordUpdate {
	eru.mutation.SetStatus(s)
	return eru
}

// SetComment sets the "comment" field.
func (eru *ETCRecordUpdate) SetComment(s string) *ETCRecordUpdate {
	eru.mutation.SetComment(s)
	return eru
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (eru *ETCRecordUpdate) SetNillableComment(s *string) *ETCRecordUpdate {
	if s != nil {
		eru.SetComment(*s)
	}
	return eru
}

// ClearComment clears the value of the "comment" field.
func (eru *ETCRecordUpdate) ClearComment() *ETCRecordUpdate {
	eru.mutation.ClearComment()
	return eru
}

// SetCreatedAt sets the "created_at" field.
func (eru *ETCRecordUpdate) SetCreatedAt(t time.Time) *ETCRecordUpdate {
	eru.mutation.SetCreatedAt(t)
	return eru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eru *ETCRecordUpdate) SetNillableCreatedAt(t *time.Time) *ETCRecordUpdate {
	if t != nil {
		eru.SetCreatedAt(*t)
	}
	return eru
}

// SetUpdatedAt sets the "updated_at" field.
func (eru *ETCRecordUpdate) SetUpdatedAt(t time.Time) *ETCRecordUpdate {
	eru.mutation.SetUpdatedAt(t)
	return eru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eru *ETCRecordUpdate) SetNillableUpdatedAt(t *time.Time) *ETCRecordUpdate {
	if t != nil {
		eru.SetUpdatedAt(*t)
	}
	return eru
}

// Mutation returns the ETCRecordMutation object of the builder.
func (eru *ETCRecordUpdate) Mutation() *ETCRecordMutation {
	return eru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eru *ETCRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eru.hooks) == 0 {
		affected, err = eru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eru.mutation = mutation
			affected, err = eru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eru.hooks) - 1; i >= 0; i-- {
			if eru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eru *ETCRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := eru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eru *ETCRecordUpdate) Exec(ctx context.Context) error {
	_, err := eru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eru *ETCRecordUpdate) ExecX(ctx context.Context) {
	if err := eru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eru *ETCRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCRecordUpdate {
	eru.modifiers = append(eru.modifiers, modifiers...)
	return eru
}

func (eru *ETCRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcrecord.Table,
			Columns: etcrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcrecord.FieldID,
			},
		},
	}
	if ps := eru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eru.mutation.Username(); ok {
		_spec.SetField(etcrecord.FieldUsername, field.TypeString, value)
	}
	if value, ok := eru.mutation.Entry(); ok {
		_spec.SetField(etcrecord.FieldEntry, field.TypeString, value)
	}
	if value, ok := eru.mutation.EntryYear(); ok {
		_spec.SetField(etcrecord.FieldEntryYear, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedEntryYear(); ok {
		_spec.AddField(etcrecord.FieldEntryYear, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.EntryMonth(); ok {
		_spec.SetField(etcrecord.FieldEntryMonth, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedEntryMonth(); ok {
		_spec.AddField(etcrecord.FieldEntryMonth, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.EntryDay(); ok {
		_spec.SetField(etcrecord.FieldEntryDay, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedEntryDay(); ok {
		_spec.AddField(etcrecord.FieldEntryDay, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.Exit(); ok {
		_spec.SetField(etcrecord.FieldExit, field.TypeString, value)
	}
	if value, ok := eru.mutation.ExitDate(); ok {
		_spec.SetField(etcrecord.FieldExitDate, field.TypeString, value)
	}
	if value, ok := eru.mutation.ExitTime(); ok {
		_spec.SetField(etcrecord.FieldExitTime, field.TypeString, value)
	}
	if value, ok := eru.mutation.TotalPrice(); ok {
		_spec.SetField(etcrecord.FieldTotalPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedTotalPrice(); ok {
		_spec.AddField(etcrecord.FieldTotalPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.DiscountPrice(); ok {
		_spec.SetField(etcrecord.FieldDiscountPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(etcrecord.FieldDiscountPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.PaidPrice(); ok {
		_spec.SetField(etcrecord.FieldPaidPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.AddedPaidPrice(); ok {
		_spec.AddField(etcrecord.FieldPaidPrice, field.TypeInt32, value)
	}
	if value, ok := eru.mutation.CarType(); ok {
		_spec.SetField(etcrecord.FieldCarType, field.TypeInt8, value)
	}
	if value, ok := eru.mutation.AddedCarType(); ok {
		_spec.AddField(etcrecord.FieldCarType, field.TypeInt8, value)
	}
	if value, ok := eru.mutation.CarNumber(); ok {
		_spec.SetField(etcrecord.FieldCarNumber, field.TypeString, value)
	}
	if value, ok := eru.mutation.CardNumber(); ok {
		_spec.SetField(etcrecord.FieldCardNumber, field.TypeString, value)
	}
	if value, ok := eru.mutation.Status(); ok {
		_spec.SetField(etcrecord.FieldStatus, field.TypeString, value)
	}
	if value, ok := eru.mutation.Comment(); ok {
		_spec.SetField(etcrecord.FieldComment, field.TypeString, value)
	}
	if eru.mutation.CommentCleared() {
		_spec.ClearField(etcrecord.FieldComment, field.TypeString)
	}
	if value, ok := eru.mutation.CreatedAt(); ok {
		_spec.SetField(etcrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eru.mutation.UpdatedAt(); ok {
		_spec.SetField(etcrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(eru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ETCRecordUpdateOne is the builder for updating a single ETCRecord entity.
type ETCRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ETCRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUsername sets the "username" field.
func (eruo *ETCRecordUpdateOne) SetUsername(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetUsername(s)
	return eruo
}

// SetEntry sets the "entry" field.
func (eruo *ETCRecordUpdateOne) SetEntry(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetEntry(s)
	return eruo
}

// SetEntryYear sets the "entry_year" field.
func (eruo *ETCRecordUpdateOne) SetEntryYear(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetEntryYear()
	eruo.mutation.SetEntryYear(i)
	return eruo
}

// AddEntryYear adds i to the "entry_year" field.
func (eruo *ETCRecordUpdateOne) AddEntryYear(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddEntryYear(i)
	return eruo
}

// SetEntryMonth sets the "entry_month" field.
func (eruo *ETCRecordUpdateOne) SetEntryMonth(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetEntryMonth()
	eruo.mutation.SetEntryMonth(i)
	return eruo
}

// AddEntryMonth adds i to the "entry_month" field.
func (eruo *ETCRecordUpdateOne) AddEntryMonth(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddEntryMonth(i)
	return eruo
}

// SetEntryDay sets the "entry_day" field.
func (eruo *ETCRecordUpdateOne) SetEntryDay(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetEntryDay()
	eruo.mutation.SetEntryDay(i)
	return eruo
}

// AddEntryDay adds i to the "entry_day" field.
func (eruo *ETCRecordUpdateOne) AddEntryDay(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddEntryDay(i)
	return eruo
}

// SetExit sets the "exit" field.
func (eruo *ETCRecordUpdateOne) SetExit(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetExit(s)
	return eruo
}

// SetExitDate sets the "exit_date" field.
func (eruo *ETCRecordUpdateOne) SetExitDate(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetExitDate(s)
	return eruo
}

// SetExitTime sets the "exit_time" field.
func (eruo *ETCRecordUpdateOne) SetExitTime(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetExitTime(s)
	return eruo
}

// SetTotalPrice sets the "total_price" field.
func (eruo *ETCRecordUpdateOne) SetTotalPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetTotalPrice()
	eruo.mutation.SetTotalPrice(i)
	return eruo
}

// AddTotalPrice adds i to the "total_price" field.
func (eruo *ETCRecordUpdateOne) AddTotalPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddTotalPrice(i)
	return eruo
}

// SetDiscountPrice sets the "discount_price" field.
func (eruo *ETCRecordUpdateOne) SetDiscountPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetDiscountPrice()
	eruo.mutation.SetDiscountPrice(i)
	return eruo
}

// AddDiscountPrice adds i to the "discount_price" field.
func (eruo *ETCRecordUpdateOne) AddDiscountPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddDiscountPrice(i)
	return eruo
}

// SetPaidPrice sets the "paid_price" field.
func (eruo *ETCRecordUpdateOne) SetPaidPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.ResetPaidPrice()
	eruo.mutation.SetPaidPrice(i)
	return eruo
}

// AddPaidPrice adds i to the "paid_price" field.
func (eruo *ETCRecordUpdateOne) AddPaidPrice(i int32) *ETCRecordUpdateOne {
	eruo.mutation.AddPaidPrice(i)
	return eruo
}

// SetCarType sets the "car_type" field.
func (eruo *ETCRecordUpdateOne) SetCarType(i int8) *ETCRecordUpdateOne {
	eruo.mutation.ResetCarType()
	eruo.mutation.SetCarType(i)
	return eruo
}

// AddCarType adds i to the "car_type" field.
func (eruo *ETCRecordUpdateOne) AddCarType(i int8) *ETCRecordUpdateOne {
	eruo.mutation.AddCarType(i)
	return eruo
}

// SetCarNumber sets the "car_number" field.
func (eruo *ETCRecordUpdateOne) SetCarNumber(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetCarNumber(s)
	return eruo
}

// SetCardNumber sets the "card_number" field.
func (eruo *ETCRecordUpdateOne) SetCardNumber(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetCardNumber(s)
	return eruo
}

// SetStatus sets the "status" field.
func (eruo *ETCRecordUpdateOne) SetStatus(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetStatus(s)
	return eruo
}

// SetComment sets the "comment" field.
func (eruo *ETCRecordUpdateOne) SetComment(s string) *ETCRecordUpdateOne {
	eruo.mutation.SetComment(s)
	return eruo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (eruo *ETCRecordUpdateOne) SetNillableComment(s *string) *ETCRecordUpdateOne {
	if s != nil {
		eruo.SetComment(*s)
	}
	return eruo
}

// ClearComment clears the value of the "comment" field.
func (eruo *ETCRecordUpdateOne) ClearComment() *ETCRecordUpdateOne {
	eruo.mutation.ClearComment()
	return eruo
}

// SetCreatedAt sets the "created_at" field.
func (eruo *ETCRecordUpdateOne) SetCreatedAt(t time.Time) *ETCRecordUpdateOne {
	eruo.mutation.SetCreatedAt(t)
	return eruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eruo *ETCRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *ETCRecordUpdateOne {
	if t != nil {
		eruo.SetCreatedAt(*t)
	}
	return eruo
}

// SetUpdatedAt sets the "updated_at" field.
func (eruo *ETCRecordUpdateOne) SetUpdatedAt(t time.Time) *ETCRecordUpdateOne {
	eruo.mutation.SetUpdatedAt(t)
	return eruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eruo *ETCRecordUpdateOne) SetNillableUpdatedAt(t *time.Time) *ETCRecordUpdateOne {
	if t != nil {
		eruo.SetUpdatedAt(*t)
	}
	return eruo
}

// Mutation returns the ETCRecordMutation object of the builder.
func (eruo *ETCRecordUpdateOne) Mutation() *ETCRecordMutation {
	return eruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (eruo *ETCRecordUpdateOne) Select(field string, fields ...string) *ETCRecordUpdateOne {
	eruo.fields = append([]string{field}, fields...)
	return eruo
}

// Save executes the query and returns the updated ETCRecord entity.
func (eruo *ETCRecordUpdateOne) Save(ctx context.Context) (*ETCRecord, error) {
	var (
		err  error
		node *ETCRecord
	)
	if len(eruo.hooks) == 0 {
		node, err = eruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eruo.mutation = mutation
			node, err = eruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(eruo.hooks) - 1; i >= 0; i-- {
			if eruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, eruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ETCRecord)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ETCRecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (eruo *ETCRecordUpdateOne) SaveX(ctx context.Context) *ETCRecord {
	node, err := eruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (eruo *ETCRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := eruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eruo *ETCRecordUpdateOne) ExecX(ctx context.Context) {
	if err := eruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eruo *ETCRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCRecordUpdateOne {
	eruo.modifiers = append(eruo.modifiers, modifiers...)
	return eruo
}

func (eruo *ETCRecordUpdateOne) sqlSave(ctx context.Context) (_node *ETCRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcrecord.Table,
			Columns: etcrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcrecord.FieldID,
			},
		},
	}
	id, ok := eruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ETCRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := eruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, etcrecord.FieldID)
		for _, f := range fields {
			if !etcrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != etcrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := eruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eruo.mutation.Username(); ok {
		_spec.SetField(etcrecord.FieldUsername, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Entry(); ok {
		_spec.SetField(etcrecord.FieldEntry, field.TypeString, value)
	}
	if value, ok := eruo.mutation.EntryYear(); ok {
		_spec.SetField(etcrecord.FieldEntryYear, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedEntryYear(); ok {
		_spec.AddField(etcrecord.FieldEntryYear, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.EntryMonth(); ok {
		_spec.SetField(etcrecord.FieldEntryMonth, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedEntryMonth(); ok {
		_spec.AddField(etcrecord.FieldEntryMonth, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.EntryDay(); ok {
		_spec.SetField(etcrecord.FieldEntryDay, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedEntryDay(); ok {
		_spec.AddField(etcrecord.FieldEntryDay, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.Exit(); ok {
		_spec.SetField(etcrecord.FieldExit, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ExitDate(); ok {
		_spec.SetField(etcrecord.FieldExitDate, field.TypeString, value)
	}
	if value, ok := eruo.mutation.ExitTime(); ok {
		_spec.SetField(etcrecord.FieldExitTime, field.TypeString, value)
	}
	if value, ok := eruo.mutation.TotalPrice(); ok {
		_spec.SetField(etcrecord.FieldTotalPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedTotalPrice(); ok {
		_spec.AddField(etcrecord.FieldTotalPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.DiscountPrice(); ok {
		_spec.SetField(etcrecord.FieldDiscountPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedDiscountPrice(); ok {
		_spec.AddField(etcrecord.FieldDiscountPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.PaidPrice(); ok {
		_spec.SetField(etcrecord.FieldPaidPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.AddedPaidPrice(); ok {
		_spec.AddField(etcrecord.FieldPaidPrice, field.TypeInt32, value)
	}
	if value, ok := eruo.mutation.CarType(); ok {
		_spec.SetField(etcrecord.FieldCarType, field.TypeInt8, value)
	}
	if value, ok := eruo.mutation.AddedCarType(); ok {
		_spec.AddField(etcrecord.FieldCarType, field.TypeInt8, value)
	}
	if value, ok := eruo.mutation.CarNumber(); ok {
		_spec.SetField(etcrecord.FieldCarNumber, field.TypeString, value)
	}
	if value, ok := eruo.mutation.CardNumber(); ok {
		_spec.SetField(etcrecord.FieldCardNumber, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Status(); ok {
		_spec.SetField(etcrecord.FieldStatus, field.TypeString, value)
	}
	if value, ok := eruo.mutation.Comment(); ok {
		_spec.SetField(etcrecord.FieldComment, field.TypeString, value)
	}
	if eruo.mutation.CommentCleared() {
		_spec.ClearField(etcrecord.FieldComment, field.TypeString)
	}
	if value, ok := eruo.mutation.CreatedAt(); ok {
		_spec.SetField(etcrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := eruo.mutation.UpdatedAt(); ok {
		_spec.SetField(etcrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(eruo.modifiers...)
	_node = &ETCRecord{config: eruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, eruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

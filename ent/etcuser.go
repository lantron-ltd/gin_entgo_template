// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"myetc.lantron.ltd/m/ent/etcuser"
)

// ETCUser is the model entity for the ETCUser schema.
type ETCUser struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// EtcUsername holds the value of the "etc_username" field.
	EtcUsername int64 `json:"etc_username,omitempty"`
	// EtcPassword holds the value of the "etc_password" field.
	EtcPassword string `json:"etc_password,omitempty"`
	// PointUsername holds the value of the "point_username" field.
	PointUsername string `json:"point_username,omitempty"`
	// PointPassword holds the value of the "point_password" field.
	PointPassword string `json:"point_password,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ETCUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case etcuser.FieldID, etcuser.FieldEtcUsername:
			values[i] = new(sql.NullInt64)
		case etcuser.FieldEtcPassword, etcuser.FieldPointUsername, etcuser.FieldPointPassword:
			values[i] = new(sql.NullString)
		case etcuser.FieldCreatedAt, etcuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ETCUser", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ETCUser fields.
func (eu *ETCUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case etcuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			eu.ID = int64(value.Int64)
		case etcuser.FieldEtcUsername:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field etc_username", values[i])
			} else if value.Valid {
				eu.EtcUsername = value.Int64
			}
		case etcuser.FieldEtcPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field etc_password", values[i])
			} else if value.Valid {
				eu.EtcPassword = value.String
			}
		case etcuser.FieldPointUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field point_username", values[i])
			} else if value.Valid {
				eu.PointUsername = value.String
			}
		case etcuser.FieldPointPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field point_password", values[i])
			} else if value.Valid {
				eu.PointPassword = value.String
			}
		case etcuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eu.CreatedAt = value.Time
			}
		case etcuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eu.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ETCUser.
// Note that you need to call ETCUser.Unwrap() before calling this method if this ETCUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (eu *ETCUser) Update() *ETCUserUpdateOne {
	return (&ETCUserClient{config: eu.config}).UpdateOne(eu)
}

// Unwrap unwraps the ETCUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eu *ETCUser) Unwrap() *ETCUser {
	_tx, ok := eu.config.driver.(*txDriver)
	if !ok {
		panic("ent: ETCUser is not a transactional entity")
	}
	eu.config.driver = _tx.drv
	return eu
}

// String implements the fmt.Stringer.
func (eu *ETCUser) String() string {
	var builder strings.Builder
	builder.WriteString("ETCUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eu.ID))
	builder.WriteString("etc_username=")
	builder.WriteString(fmt.Sprintf("%v", eu.EtcUsername))
	builder.WriteString(", ")
	builder.WriteString("etc_password=")
	builder.WriteString(eu.EtcPassword)
	builder.WriteString(", ")
	builder.WriteString("point_username=")
	builder.WriteString(eu.PointUsername)
	builder.WriteString(", ")
	builder.WriteString("point_password=")
	builder.WriteString(eu.PointPassword)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eu.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ETCUsers is a parsable slice of ETCUser.
type ETCUsers []*ETCUser

func (eu ETCUsers) config(cfg config) {
	for _i := range eu {
		eu[_i].config = cfg
	}
}

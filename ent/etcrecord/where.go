// Code generated by ent, DO NOT EDIT.

package etcrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"myetc.lantron.ltd/m/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// Entry applies equality check predicate on the "entry" field. It's identical to EntryEQ.
func Entry(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntry), v))
	})
}

// EntryYear applies equality check predicate on the "entry_year" field. It's identical to EntryYearEQ.
func EntryYear(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryYear), v))
	})
}

// EntryMonth applies equality check predicate on the "entry_month" field. It's identical to EntryMonthEQ.
func EntryMonth(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryMonth), v))
	})
}

// EntryDay applies equality check predicate on the "entry_day" field. It's identical to EntryDayEQ.
func EntryDay(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryDay), v))
	})
}

// Exit applies equality check predicate on the "exit" field. It's identical to ExitEQ.
func Exit(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExit), v))
	})
}

// ExitDate applies equality check predicate on the "exit_date" field. It's identical to ExitDateEQ.
func ExitDate(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExitDate), v))
	})
}

// ExitTime applies equality check predicate on the "exit_time" field. It's identical to ExitTimeEQ.
func ExitTime(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExitTime), v))
	})
}

// TotalPrice applies equality check predicate on the "total_price" field. It's identical to TotalPriceEQ.
func TotalPrice(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// DiscountPrice applies equality check predicate on the "discount_price" field. It's identical to DiscountPriceEQ.
func DiscountPrice(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// PaidPrice applies equality check predicate on the "paid_price" field. It's identical to PaidPriceEQ.
func PaidPrice(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidPrice), v))
	})
}

// CarType applies equality check predicate on the "car_type" field. It's identical to CarTypeEQ.
func CarType(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarType), v))
	})
}

// CarNumber applies equality check predicate on the "car_number" field. It's identical to CarNumberEQ.
func CarNumber(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarNumber), v))
	})
}

// CardNumber applies equality check predicate on the "card_number" field. It's identical to CardNumberEQ.
func CardNumber(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardNumber), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUsername), v))
	})
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUsername), v))
	})
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUsername), v...))
	})
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUsername), v...))
	})
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUsername), v))
	})
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUsername), v))
	})
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUsername), v))
	})
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUsername), v))
	})
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUsername), v))
	})
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUsername), v))
	})
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUsername), v))
	})
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUsername), v))
	})
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUsername), v))
	})
}

// EntryEQ applies the EQ predicate on the "entry" field.
func EntryEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntry), v))
	})
}

// EntryNEQ applies the NEQ predicate on the "entry" field.
func EntryNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntry), v))
	})
}

// EntryIn applies the In predicate on the "entry" field.
func EntryIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntry), v...))
	})
}

// EntryNotIn applies the NotIn predicate on the "entry" field.
func EntryNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntry), v...))
	})
}

// EntryGT applies the GT predicate on the "entry" field.
func EntryGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntry), v))
	})
}

// EntryGTE applies the GTE predicate on the "entry" field.
func EntryGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntry), v))
	})
}

// EntryLT applies the LT predicate on the "entry" field.
func EntryLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntry), v))
	})
}

// EntryLTE applies the LTE predicate on the "entry" field.
func EntryLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntry), v))
	})
}

// EntryContains applies the Contains predicate on the "entry" field.
func EntryContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEntry), v))
	})
}

// EntryHasPrefix applies the HasPrefix predicate on the "entry" field.
func EntryHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEntry), v))
	})
}

// EntryHasSuffix applies the HasSuffix predicate on the "entry" field.
func EntryHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEntry), v))
	})
}

// EntryEqualFold applies the EqualFold predicate on the "entry" field.
func EntryEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEntry), v))
	})
}

// EntryContainsFold applies the ContainsFold predicate on the "entry" field.
func EntryContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEntry), v))
	})
}

// EntryYearEQ applies the EQ predicate on the "entry_year" field.
func EntryYearEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryYear), v))
	})
}

// EntryYearNEQ applies the NEQ predicate on the "entry_year" field.
func EntryYearNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryYear), v))
	})
}

// EntryYearIn applies the In predicate on the "entry_year" field.
func EntryYearIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntryYear), v...))
	})
}

// EntryYearNotIn applies the NotIn predicate on the "entry_year" field.
func EntryYearNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntryYear), v...))
	})
}

// EntryYearGT applies the GT predicate on the "entry_year" field.
func EntryYearGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryYear), v))
	})
}

// EntryYearGTE applies the GTE predicate on the "entry_year" field.
func EntryYearGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryYear), v))
	})
}

// EntryYearLT applies the LT predicate on the "entry_year" field.
func EntryYearLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryYear), v))
	})
}

// EntryYearLTE applies the LTE predicate on the "entry_year" field.
func EntryYearLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryYear), v))
	})
}

// EntryMonthEQ applies the EQ predicate on the "entry_month" field.
func EntryMonthEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryMonth), v))
	})
}

// EntryMonthNEQ applies the NEQ predicate on the "entry_month" field.
func EntryMonthNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryMonth), v))
	})
}

// EntryMonthIn applies the In predicate on the "entry_month" field.
func EntryMonthIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntryMonth), v...))
	})
}

// EntryMonthNotIn applies the NotIn predicate on the "entry_month" field.
func EntryMonthNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntryMonth), v...))
	})
}

// EntryMonthGT applies the GT predicate on the "entry_month" field.
func EntryMonthGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryMonth), v))
	})
}

// EntryMonthGTE applies the GTE predicate on the "entry_month" field.
func EntryMonthGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryMonth), v))
	})
}

// EntryMonthLT applies the LT predicate on the "entry_month" field.
func EntryMonthLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryMonth), v))
	})
}

// EntryMonthLTE applies the LTE predicate on the "entry_month" field.
func EntryMonthLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryMonth), v))
	})
}

// EntryDayEQ applies the EQ predicate on the "entry_day" field.
func EntryDayEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEntryDay), v))
	})
}

// EntryDayNEQ applies the NEQ predicate on the "entry_day" field.
func EntryDayNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEntryDay), v))
	})
}

// EntryDayIn applies the In predicate on the "entry_day" field.
func EntryDayIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEntryDay), v...))
	})
}

// EntryDayNotIn applies the NotIn predicate on the "entry_day" field.
func EntryDayNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEntryDay), v...))
	})
}

// EntryDayGT applies the GT predicate on the "entry_day" field.
func EntryDayGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEntryDay), v))
	})
}

// EntryDayGTE applies the GTE predicate on the "entry_day" field.
func EntryDayGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEntryDay), v))
	})
}

// EntryDayLT applies the LT predicate on the "entry_day" field.
func EntryDayLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEntryDay), v))
	})
}

// EntryDayLTE applies the LTE predicate on the "entry_day" field.
func EntryDayLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEntryDay), v))
	})
}

// ExitEQ applies the EQ predicate on the "exit" field.
func ExitEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExit), v))
	})
}

// ExitNEQ applies the NEQ predicate on the "exit" field.
func ExitNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExit), v))
	})
}

// ExitIn applies the In predicate on the "exit" field.
func ExitIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExit), v...))
	})
}

// ExitNotIn applies the NotIn predicate on the "exit" field.
func ExitNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExit), v...))
	})
}

// ExitGT applies the GT predicate on the "exit" field.
func ExitGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExit), v))
	})
}

// ExitGTE applies the GTE predicate on the "exit" field.
func ExitGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExit), v))
	})
}

// ExitLT applies the LT predicate on the "exit" field.
func ExitLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExit), v))
	})
}

// ExitLTE applies the LTE predicate on the "exit" field.
func ExitLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExit), v))
	})
}

// ExitContains applies the Contains predicate on the "exit" field.
func ExitContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExit), v))
	})
}

// ExitHasPrefix applies the HasPrefix predicate on the "exit" field.
func ExitHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExit), v))
	})
}

// ExitHasSuffix applies the HasSuffix predicate on the "exit" field.
func ExitHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExit), v))
	})
}

// ExitEqualFold applies the EqualFold predicate on the "exit" field.
func ExitEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExit), v))
	})
}

// ExitContainsFold applies the ContainsFold predicate on the "exit" field.
func ExitContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExit), v))
	})
}

// ExitDateEQ applies the EQ predicate on the "exit_date" field.
func ExitDateEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExitDate), v))
	})
}

// ExitDateNEQ applies the NEQ predicate on the "exit_date" field.
func ExitDateNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExitDate), v))
	})
}

// ExitDateIn applies the In predicate on the "exit_date" field.
func ExitDateIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExitDate), v...))
	})
}

// ExitDateNotIn applies the NotIn predicate on the "exit_date" field.
func ExitDateNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExitDate), v...))
	})
}

// ExitDateGT applies the GT predicate on the "exit_date" field.
func ExitDateGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExitDate), v))
	})
}

// ExitDateGTE applies the GTE predicate on the "exit_date" field.
func ExitDateGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExitDate), v))
	})
}

// ExitDateLT applies the LT predicate on the "exit_date" field.
func ExitDateLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExitDate), v))
	})
}

// ExitDateLTE applies the LTE predicate on the "exit_date" field.
func ExitDateLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExitDate), v))
	})
}

// ExitDateContains applies the Contains predicate on the "exit_date" field.
func ExitDateContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExitDate), v))
	})
}

// ExitDateHasPrefix applies the HasPrefix predicate on the "exit_date" field.
func ExitDateHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExitDate), v))
	})
}

// ExitDateHasSuffix applies the HasSuffix predicate on the "exit_date" field.
func ExitDateHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExitDate), v))
	})
}

// ExitDateEqualFold applies the EqualFold predicate on the "exit_date" field.
func ExitDateEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExitDate), v))
	})
}

// ExitDateContainsFold applies the ContainsFold predicate on the "exit_date" field.
func ExitDateContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExitDate), v))
	})
}

// ExitTimeEQ applies the EQ predicate on the "exit_time" field.
func ExitTimeEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExitTime), v))
	})
}

// ExitTimeNEQ applies the NEQ predicate on the "exit_time" field.
func ExitTimeNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExitTime), v))
	})
}

// ExitTimeIn applies the In predicate on the "exit_time" field.
func ExitTimeIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldExitTime), v...))
	})
}

// ExitTimeNotIn applies the NotIn predicate on the "exit_time" field.
func ExitTimeNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldExitTime), v...))
	})
}

// ExitTimeGT applies the GT predicate on the "exit_time" field.
func ExitTimeGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExitTime), v))
	})
}

// ExitTimeGTE applies the GTE predicate on the "exit_time" field.
func ExitTimeGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExitTime), v))
	})
}

// ExitTimeLT applies the LT predicate on the "exit_time" field.
func ExitTimeLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExitTime), v))
	})
}

// ExitTimeLTE applies the LTE predicate on the "exit_time" field.
func ExitTimeLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExitTime), v))
	})
}

// ExitTimeContains applies the Contains predicate on the "exit_time" field.
func ExitTimeContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExitTime), v))
	})
}

// ExitTimeHasPrefix applies the HasPrefix predicate on the "exit_time" field.
func ExitTimeHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExitTime), v))
	})
}

// ExitTimeHasSuffix applies the HasSuffix predicate on the "exit_time" field.
func ExitTimeHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExitTime), v))
	})
}

// ExitTimeEqualFold applies the EqualFold predicate on the "exit_time" field.
func ExitTimeEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExitTime), v))
	})
}

// ExitTimeContainsFold applies the ContainsFold predicate on the "exit_time" field.
func ExitTimeContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExitTime), v))
	})
}

// TotalPriceEQ applies the EQ predicate on the "total_price" field.
func TotalPriceEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceNEQ applies the NEQ predicate on the "total_price" field.
func TotalPriceNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceIn applies the In predicate on the "total_price" field.
func TotalPriceIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceNotIn applies the NotIn predicate on the "total_price" field.
func TotalPriceNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTotalPrice), v...))
	})
}

// TotalPriceGT applies the GT predicate on the "total_price" field.
func TotalPriceGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceGTE applies the GTE predicate on the "total_price" field.
func TotalPriceGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLT applies the LT predicate on the "total_price" field.
func TotalPriceLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTotalPrice), v))
	})
}

// TotalPriceLTE applies the LTE predicate on the "total_price" field.
func TotalPriceLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTotalPrice), v))
	})
}

// DiscountPriceEQ applies the EQ predicate on the "discount_price" field.
func DiscountPriceEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceNEQ applies the NEQ predicate on the "discount_price" field.
func DiscountPriceNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceIn applies the In predicate on the "discount_price" field.
func DiscountPriceIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceNotIn applies the NotIn predicate on the "discount_price" field.
func DiscountPriceNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDiscountPrice), v...))
	})
}

// DiscountPriceGT applies the GT predicate on the "discount_price" field.
func DiscountPriceGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceGTE applies the GTE predicate on the "discount_price" field.
func DiscountPriceGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLT applies the LT predicate on the "discount_price" field.
func DiscountPriceLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDiscountPrice), v))
	})
}

// DiscountPriceLTE applies the LTE predicate on the "discount_price" field.
func DiscountPriceLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDiscountPrice), v))
	})
}

// PaidPriceEQ applies the EQ predicate on the "paid_price" field.
func PaidPriceEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPaidPrice), v))
	})
}

// PaidPriceNEQ applies the NEQ predicate on the "paid_price" field.
func PaidPriceNEQ(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPaidPrice), v))
	})
}

// PaidPriceIn applies the In predicate on the "paid_price" field.
func PaidPriceIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPaidPrice), v...))
	})
}

// PaidPriceNotIn applies the NotIn predicate on the "paid_price" field.
func PaidPriceNotIn(vs ...int32) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPaidPrice), v...))
	})
}

// PaidPriceGT applies the GT predicate on the "paid_price" field.
func PaidPriceGT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPaidPrice), v))
	})
}

// PaidPriceGTE applies the GTE predicate on the "paid_price" field.
func PaidPriceGTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPaidPrice), v))
	})
}

// PaidPriceLT applies the LT predicate on the "paid_price" field.
func PaidPriceLT(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPaidPrice), v))
	})
}

// PaidPriceLTE applies the LTE predicate on the "paid_price" field.
func PaidPriceLTE(v int32) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPaidPrice), v))
	})
}

// CarTypeEQ applies the EQ predicate on the "car_type" field.
func CarTypeEQ(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarType), v))
	})
}

// CarTypeNEQ applies the NEQ predicate on the "car_type" field.
func CarTypeNEQ(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarType), v))
	})
}

// CarTypeIn applies the In predicate on the "car_type" field.
func CarTypeIn(vs ...int8) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCarType), v...))
	})
}

// CarTypeNotIn applies the NotIn predicate on the "car_type" field.
func CarTypeNotIn(vs ...int8) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCarType), v...))
	})
}

// CarTypeGT applies the GT predicate on the "car_type" field.
func CarTypeGT(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarType), v))
	})
}

// CarTypeGTE applies the GTE predicate on the "car_type" field.
func CarTypeGTE(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarType), v))
	})
}

// CarTypeLT applies the LT predicate on the "car_type" field.
func CarTypeLT(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarType), v))
	})
}

// CarTypeLTE applies the LTE predicate on the "car_type" field.
func CarTypeLTE(v int8) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarType), v))
	})
}

// CarNumberEQ applies the EQ predicate on the "car_number" field.
func CarNumberEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCarNumber), v))
	})
}

// CarNumberNEQ applies the NEQ predicate on the "car_number" field.
func CarNumberNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCarNumber), v))
	})
}

// CarNumberIn applies the In predicate on the "car_number" field.
func CarNumberIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCarNumber), v...))
	})
}

// CarNumberNotIn applies the NotIn predicate on the "car_number" field.
func CarNumberNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCarNumber), v...))
	})
}

// CarNumberGT applies the GT predicate on the "car_number" field.
func CarNumberGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCarNumber), v))
	})
}

// CarNumberGTE applies the GTE predicate on the "car_number" field.
func CarNumberGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCarNumber), v))
	})
}

// CarNumberLT applies the LT predicate on the "car_number" field.
func CarNumberLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCarNumber), v))
	})
}

// CarNumberLTE applies the LTE predicate on the "car_number" field.
func CarNumberLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCarNumber), v))
	})
}

// CarNumberContains applies the Contains predicate on the "car_number" field.
func CarNumberContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCarNumber), v))
	})
}

// CarNumberHasPrefix applies the HasPrefix predicate on the "car_number" field.
func CarNumberHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCarNumber), v))
	})
}

// CarNumberHasSuffix applies the HasSuffix predicate on the "car_number" field.
func CarNumberHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCarNumber), v))
	})
}

// CarNumberEqualFold applies the EqualFold predicate on the "car_number" field.
func CarNumberEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCarNumber), v))
	})
}

// CarNumberContainsFold applies the ContainsFold predicate on the "car_number" field.
func CarNumberContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCarNumber), v))
	})
}

// CardNumberEQ applies the EQ predicate on the "card_number" field.
func CardNumberEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCardNumber), v))
	})
}

// CardNumberNEQ applies the NEQ predicate on the "card_number" field.
func CardNumberNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCardNumber), v))
	})
}

// CardNumberIn applies the In predicate on the "card_number" field.
func CardNumberIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCardNumber), v...))
	})
}

// CardNumberNotIn applies the NotIn predicate on the "card_number" field.
func CardNumberNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCardNumber), v...))
	})
}

// CardNumberGT applies the GT predicate on the "card_number" field.
func CardNumberGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCardNumber), v))
	})
}

// CardNumberGTE applies the GTE predicate on the "card_number" field.
func CardNumberGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCardNumber), v))
	})
}

// CardNumberLT applies the LT predicate on the "card_number" field.
func CardNumberLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCardNumber), v))
	})
}

// CardNumberLTE applies the LTE predicate on the "card_number" field.
func CardNumberLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCardNumber), v))
	})
}

// CardNumberContains applies the Contains predicate on the "card_number" field.
func CardNumberContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCardNumber), v))
	})
}

// CardNumberHasPrefix applies the HasPrefix predicate on the "card_number" field.
func CardNumberHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCardNumber), v))
	})
}

// CardNumberHasSuffix applies the HasSuffix predicate on the "card_number" field.
func CardNumberHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCardNumber), v))
	})
}

// CardNumberEqualFold applies the EqualFold predicate on the "card_number" field.
func CardNumberEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCardNumber), v))
	})
}

// CardNumberContainsFold applies the ContainsFold predicate on the "card_number" field.
func CardNumberContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCardNumber), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ETCRecord {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ETCRecord) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ETCRecord) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ETCRecord) predicate.ETCRecord {
	return predicate.ETCRecord(func(s *sql.Selector) {
		p(s.Not())
	})
}

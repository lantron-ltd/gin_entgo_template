// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"myetc.lantron.ltd/m/ent/etcrecord"
)

// ETCRecordCreate is the builder for creating a ETCRecord entity.
type ETCRecordCreate struct {
	config
	mutation *ETCRecordMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUsername sets the "username" field.
func (erc *ETCRecordCreate) SetUsername(s string) *ETCRecordCreate {
	erc.mutation.SetUsername(s)
	return erc
}

// SetEntry sets the "entry" field.
func (erc *ETCRecordCreate) SetEntry(s string) *ETCRecordCreate {
	erc.mutation.SetEntry(s)
	return erc
}

// SetEntryYear sets the "entry_year" field.
func (erc *ETCRecordCreate) SetEntryYear(i int32) *ETCRecordCreate {
	erc.mutation.SetEntryYear(i)
	return erc
}

// SetEntryMonth sets the "entry_month" field.
func (erc *ETCRecordCreate) SetEntryMonth(i int32) *ETCRecordCreate {
	erc.mutation.SetEntryMonth(i)
	return erc
}

// SetEntryDay sets the "entry_day" field.
func (erc *ETCRecordCreate) SetEntryDay(i int32) *ETCRecordCreate {
	erc.mutation.SetEntryDay(i)
	return erc
}

// SetExit sets the "exit" field.
func (erc *ETCRecordCreate) SetExit(s string) *ETCRecordCreate {
	erc.mutation.SetExit(s)
	return erc
}

// SetExitDate sets the "exit_date" field.
func (erc *ETCRecordCreate) SetExitDate(s string) *ETCRecordCreate {
	erc.mutation.SetExitDate(s)
	return erc
}

// SetExitTime sets the "exit_time" field.
func (erc *ETCRecordCreate) SetExitTime(s string) *ETCRecordCreate {
	erc.mutation.SetExitTime(s)
	return erc
}

// SetTotalPrice sets the "total_price" field.
func (erc *ETCRecordCreate) SetTotalPrice(i int32) *ETCRecordCreate {
	erc.mutation.SetTotalPrice(i)
	return erc
}

// SetDiscountPrice sets the "discount_price" field.
func (erc *ETCRecordCreate) SetDiscountPrice(i int32) *ETCRecordCreate {
	erc.mutation.SetDiscountPrice(i)
	return erc
}

// SetPaidPrice sets the "paid_price" field.
func (erc *ETCRecordCreate) SetPaidPrice(i int32) *ETCRecordCreate {
	erc.mutation.SetPaidPrice(i)
	return erc
}

// SetCarType sets the "car_type" field.
func (erc *ETCRecordCreate) SetCarType(i int8) *ETCRecordCreate {
	erc.mutation.SetCarType(i)
	return erc
}

// SetCarNumber sets the "car_number" field.
func (erc *ETCRecordCreate) SetCarNumber(s string) *ETCRecordCreate {
	erc.mutation.SetCarNumber(s)
	return erc
}

// SetCardNumber sets the "card_number" field.
func (erc *ETCRecordCreate) SetCardNumber(s string) *ETCRecordCreate {
	erc.mutation.SetCardNumber(s)
	return erc
}

// SetStatus sets the "status" field.
func (erc *ETCRecordCreate) SetStatus(s string) *ETCRecordCreate {
	erc.mutation.SetStatus(s)
	return erc
}

// SetComment sets the "comment" field.
func (erc *ETCRecordCreate) SetComment(s string) *ETCRecordCreate {
	erc.mutation.SetComment(s)
	return erc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (erc *ETCRecordCreate) SetNillableComment(s *string) *ETCRecordCreate {
	if s != nil {
		erc.SetComment(*s)
	}
	return erc
}

// SetCreatedAt sets the "created_at" field.
func (erc *ETCRecordCreate) SetCreatedAt(t time.Time) *ETCRecordCreate {
	erc.mutation.SetCreatedAt(t)
	return erc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (erc *ETCRecordCreate) SetNillableCreatedAt(t *time.Time) *ETCRecordCreate {
	if t != nil {
		erc.SetCreatedAt(*t)
	}
	return erc
}

// SetUpdatedAt sets the "updated_at" field.
func (erc *ETCRecordCreate) SetUpdatedAt(t time.Time) *ETCRecordCreate {
	erc.mutation.SetUpdatedAt(t)
	return erc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (erc *ETCRecordCreate) SetNillableUpdatedAt(t *time.Time) *ETCRecordCreate {
	if t != nil {
		erc.SetUpdatedAt(*t)
	}
	return erc
}

// SetID sets the "id" field.
func (erc *ETCRecordCreate) SetID(i int64) *ETCRecordCreate {
	erc.mutation.SetID(i)
	return erc
}

// Mutation returns the ETCRecordMutation object of the builder.
func (erc *ETCRecordCreate) Mutation() *ETCRecordMutation {
	return erc.mutation
}

// Save creates the ETCRecord in the database.
func (erc *ETCRecordCreate) Save(ctx context.Context) (*ETCRecord, error) {
	var (
		err  error
		node *ETCRecord
	)
	erc.defaults()
	if len(erc.hooks) == 0 {
		if err = erc.check(); err != nil {
			return nil, err
		}
		node, err = erc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = erc.check(); err != nil {
				return nil, err
			}
			erc.mutation = mutation
			if node, err = erc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(erc.hooks) - 1; i >= 0; i-- {
			if erc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = erc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, erc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ETCRecord)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ETCRecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (erc *ETCRecordCreate) SaveX(ctx context.Context) *ETCRecord {
	v, err := erc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (erc *ETCRecordCreate) Exec(ctx context.Context) error {
	_, err := erc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (erc *ETCRecordCreate) ExecX(ctx context.Context) {
	if err := erc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (erc *ETCRecordCreate) defaults() {
	if _, ok := erc.mutation.CreatedAt(); !ok {
		v := etcrecord.DefaultCreatedAt
		erc.mutation.SetCreatedAt(v)
	}
	if _, ok := erc.mutation.UpdatedAt(); !ok {
		v := etcrecord.DefaultUpdatedAt
		erc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (erc *ETCRecordCreate) check() error {
	if _, ok := erc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "ETCRecord.username"`)}
	}
	if _, ok := erc.mutation.Entry(); !ok {
		return &ValidationError{Name: "entry", err: errors.New(`ent: missing required field "ETCRecord.entry"`)}
	}
	if _, ok := erc.mutation.EntryYear(); !ok {
		return &ValidationError{Name: "entry_year", err: errors.New(`ent: missing required field "ETCRecord.entry_year"`)}
	}
	if _, ok := erc.mutation.EntryMonth(); !ok {
		return &ValidationError{Name: "entry_month", err: errors.New(`ent: missing required field "ETCRecord.entry_month"`)}
	}
	if _, ok := erc.mutation.EntryDay(); !ok {
		return &ValidationError{Name: "entry_day", err: errors.New(`ent: missing required field "ETCRecord.entry_day"`)}
	}
	if _, ok := erc.mutation.Exit(); !ok {
		return &ValidationError{Name: "exit", err: errors.New(`ent: missing required field "ETCRecord.exit"`)}
	}
	if _, ok := erc.mutation.ExitDate(); !ok {
		return &ValidationError{Name: "exit_date", err: errors.New(`ent: missing required field "ETCRecord.exit_date"`)}
	}
	if _, ok := erc.mutation.ExitTime(); !ok {
		return &ValidationError{Name: "exit_time", err: errors.New(`ent: missing required field "ETCRecord.exit_time"`)}
	}
	if _, ok := erc.mutation.TotalPrice(); !ok {
		return &ValidationError{Name: "total_price", err: errors.New(`ent: missing required field "ETCRecord.total_price"`)}
	}
	if _, ok := erc.mutation.DiscountPrice(); !ok {
		return &ValidationError{Name: "discount_price", err: errors.New(`ent: missing required field "ETCRecord.discount_price"`)}
	}
	if _, ok := erc.mutation.PaidPrice(); !ok {
		return &ValidationError{Name: "paid_price", err: errors.New(`ent: missing required field "ETCRecord.paid_price"`)}
	}
	if _, ok := erc.mutation.CarType(); !ok {
		return &ValidationError{Name: "car_type", err: errors.New(`ent: missing required field "ETCRecord.car_type"`)}
	}
	if _, ok := erc.mutation.CarNumber(); !ok {
		return &ValidationError{Name: "car_number", err: errors.New(`ent: missing required field "ETCRecord.car_number"`)}
	}
	if _, ok := erc.mutation.CardNumber(); !ok {
		return &ValidationError{Name: "card_number", err: errors.New(`ent: missing required field "ETCRecord.card_number"`)}
	}
	if _, ok := erc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "ETCRecord.status"`)}
	}
	if _, ok := erc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ETCRecord.created_at"`)}
	}
	if _, ok := erc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ETCRecord.updated_at"`)}
	}
	return nil
}

func (erc *ETCRecordCreate) sqlSave(ctx context.Context) (*ETCRecord, error) {
	_node, _spec := erc.createSpec()
	if err := sqlgraph.CreateNode(ctx, erc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (erc *ETCRecordCreate) createSpec() (*ETCRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &ETCRecord{config: erc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: etcrecord.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcrecord.FieldID,
			},
		}
	)
	_spec.OnConflict = erc.conflict
	if id, ok := erc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := erc.mutation.Username(); ok {
		_spec.SetField(etcrecord.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := erc.mutation.Entry(); ok {
		_spec.SetField(etcrecord.FieldEntry, field.TypeString, value)
		_node.Entry = value
	}
	if value, ok := erc.mutation.EntryYear(); ok {
		_spec.SetField(etcrecord.FieldEntryYear, field.TypeInt32, value)
		_node.EntryYear = value
	}
	if value, ok := erc.mutation.EntryMonth(); ok {
		_spec.SetField(etcrecord.FieldEntryMonth, field.TypeInt32, value)
		_node.EntryMonth = value
	}
	if value, ok := erc.mutation.EntryDay(); ok {
		_spec.SetField(etcrecord.FieldEntryDay, field.TypeInt32, value)
		_node.EntryDay = value
	}
	if value, ok := erc.mutation.Exit(); ok {
		_spec.SetField(etcrecord.FieldExit, field.TypeString, value)
		_node.Exit = value
	}
	if value, ok := erc.mutation.ExitDate(); ok {
		_spec.SetField(etcrecord.FieldExitDate, field.TypeString, value)
		_node.ExitDate = value
	}
	if value, ok := erc.mutation.ExitTime(); ok {
		_spec.SetField(etcrecord.FieldExitTime, field.TypeString, value)
		_node.ExitTime = value
	}
	if value, ok := erc.mutation.TotalPrice(); ok {
		_spec.SetField(etcrecord.FieldTotalPrice, field.TypeInt32, value)
		_node.TotalPrice = value
	}
	if value, ok := erc.mutation.DiscountPrice(); ok {
		_spec.SetField(etcrecord.FieldDiscountPrice, field.TypeInt32, value)
		_node.DiscountPrice = value
	}
	if value, ok := erc.mutation.PaidPrice(); ok {
		_spec.SetField(etcrecord.FieldPaidPrice, field.TypeInt32, value)
		_node.PaidPrice = value
	}
	if value, ok := erc.mutation.CarType(); ok {
		_spec.SetField(etcrecord.FieldCarType, field.TypeInt8, value)
		_node.CarType = value
	}
	if value, ok := erc.mutation.CarNumber(); ok {
		_spec.SetField(etcrecord.FieldCarNumber, field.TypeString, value)
		_node.CarNumber = value
	}
	if value, ok := erc.mutation.CardNumber(); ok {
		_spec.SetField(etcrecord.FieldCardNumber, field.TypeString, value)
		_node.CardNumber = value
	}
	if value, ok := erc.mutation.Status(); ok {
		_spec.SetField(etcrecord.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := erc.mutation.Comment(); ok {
		_spec.SetField(etcrecord.FieldComment, field.TypeString, value)
		_node.Comment = &value
	}
	if value, ok := erc.mutation.CreatedAt(); ok {
		_spec.SetField(etcrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := erc.mutation.UpdatedAt(); ok {
		_spec.SetField(etcrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ETCRecord.Create().
//		SetUsername(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ETCRecordUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (erc *ETCRecordCreate) OnConflict(opts ...sql.ConflictOption) *ETCRecordUpsertOne {
	erc.conflict = opts
	return &ETCRecordUpsertOne{
		create: erc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (erc *ETCRecordCreate) OnConflictColumns(columns ...string) *ETCRecordUpsertOne {
	erc.conflict = append(erc.conflict, sql.ConflictColumns(columns...))
	return &ETCRecordUpsertOne{
		create: erc,
	}
}

type (
	// ETCRecordUpsertOne is the builder for "upsert"-ing
	//  one ETCRecord node.
	ETCRecordUpsertOne struct {
		create *ETCRecordCreate
	}

	// ETCRecordUpsert is the "OnConflict" setter.
	ETCRecordUpsert struct {
		*sql.UpdateSet
	}
)

// SetUsername sets the "username" field.
func (u *ETCRecordUpsert) SetUsername(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateUsername() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldUsername)
	return u
}

// SetEntry sets the "entry" field.
func (u *ETCRecordUpsert) SetEntry(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldEntry, v)
	return u
}

// UpdateEntry sets the "entry" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateEntry() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldEntry)
	return u
}

// SetEntryYear sets the "entry_year" field.
func (u *ETCRecordUpsert) SetEntryYear(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldEntryYear, v)
	return u
}

// UpdateEntryYear sets the "entry_year" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateEntryYear() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldEntryYear)
	return u
}

// AddEntryYear adds v to the "entry_year" field.
func (u *ETCRecordUpsert) AddEntryYear(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldEntryYear, v)
	return u
}

// SetEntryMonth sets the "entry_month" field.
func (u *ETCRecordUpsert) SetEntryMonth(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldEntryMonth, v)
	return u
}

// UpdateEntryMonth sets the "entry_month" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateEntryMonth() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldEntryMonth)
	return u
}

// AddEntryMonth adds v to the "entry_month" field.
func (u *ETCRecordUpsert) AddEntryMonth(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldEntryMonth, v)
	return u
}

// SetEntryDay sets the "entry_day" field.
func (u *ETCRecordUpsert) SetEntryDay(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldEntryDay, v)
	return u
}

// UpdateEntryDay sets the "entry_day" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateEntryDay() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldEntryDay)
	return u
}

// AddEntryDay adds v to the "entry_day" field.
func (u *ETCRecordUpsert) AddEntryDay(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldEntryDay, v)
	return u
}

// SetExit sets the "exit" field.
func (u *ETCRecordUpsert) SetExit(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldExit, v)
	return u
}

// UpdateExit sets the "exit" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateExit() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldExit)
	return u
}

// SetExitDate sets the "exit_date" field.
func (u *ETCRecordUpsert) SetExitDate(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldExitDate, v)
	return u
}

// UpdateExitDate sets the "exit_date" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateExitDate() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldExitDate)
	return u
}

// SetExitTime sets the "exit_time" field.
func (u *ETCRecordUpsert) SetExitTime(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldExitTime, v)
	return u
}

// UpdateExitTime sets the "exit_time" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateExitTime() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldExitTime)
	return u
}

// SetTotalPrice sets the "total_price" field.
func (u *ETCRecordUpsert) SetTotalPrice(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldTotalPrice, v)
	return u
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateTotalPrice() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldTotalPrice)
	return u
}

// AddTotalPrice adds v to the "total_price" field.
func (u *ETCRecordUpsert) AddTotalPrice(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldTotalPrice, v)
	return u
}

// SetDiscountPrice sets the "discount_price" field.
func (u *ETCRecordUpsert) SetDiscountPrice(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldDiscountPrice, v)
	return u
}

// UpdateDiscountPrice sets the "discount_price" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateDiscountPrice() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldDiscountPrice)
	return u
}

// AddDiscountPrice adds v to the "discount_price" field.
func (u *ETCRecordUpsert) AddDiscountPrice(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldDiscountPrice, v)
	return u
}

// SetPaidPrice sets the "paid_price" field.
func (u *ETCRecordUpsert) SetPaidPrice(v int32) *ETCRecordUpsert {
	u.Set(etcrecord.FieldPaidPrice, v)
	return u
}

// UpdatePaidPrice sets the "paid_price" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdatePaidPrice() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldPaidPrice)
	return u
}

// AddPaidPrice adds v to the "paid_price" field.
func (u *ETCRecordUpsert) AddPaidPrice(v int32) *ETCRecordUpsert {
	u.Add(etcrecord.FieldPaidPrice, v)
	return u
}

// SetCarType sets the "car_type" field.
func (u *ETCRecordUpsert) SetCarType(v int8) *ETCRecordUpsert {
	u.Set(etcrecord.FieldCarType, v)
	return u
}

// UpdateCarType sets the "car_type" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateCarType() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldCarType)
	return u
}

// AddCarType adds v to the "car_type" field.
func (u *ETCRecordUpsert) AddCarType(v int8) *ETCRecordUpsert {
	u.Add(etcrecord.FieldCarType, v)
	return u
}

// SetCarNumber sets the "car_number" field.
func (u *ETCRecordUpsert) SetCarNumber(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldCarNumber, v)
	return u
}

// UpdateCarNumber sets the "car_number" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateCarNumber() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldCarNumber)
	return u
}

// SetCardNumber sets the "card_number" field.
func (u *ETCRecordUpsert) SetCardNumber(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldCardNumber, v)
	return u
}

// UpdateCardNumber sets the "card_number" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateCardNumber() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldCardNumber)
	return u
}

// SetStatus sets the "status" field.
func (u *ETCRecordUpsert) SetStatus(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateStatus() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldStatus)
	return u
}

// SetComment sets the "comment" field.
func (u *ETCRecordUpsert) SetComment(v string) *ETCRecordUpsert {
	u.Set(etcrecord.FieldComment, v)
	return u
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateComment() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldComment)
	return u
}

// ClearComment clears the value of the "comment" field.
func (u *ETCRecordUpsert) ClearComment() *ETCRecordUpsert {
	u.SetNull(etcrecord.FieldComment)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ETCRecordUpsert) SetCreatedAt(v time.Time) *ETCRecordUpsert {
	u.Set(etcrecord.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateCreatedAt() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ETCRecordUpsert) SetUpdatedAt(v time.Time) *ETCRecordUpsert {
	u.Set(etcrecord.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ETCRecordUpsert) UpdateUpdatedAt() *ETCRecordUpsert {
	u.SetExcluded(etcrecord.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(etcrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ETCRecordUpsertOne) UpdateNewValues() *ETCRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(etcrecord.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ETCRecordUpsertOne) Ignore() *ETCRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ETCRecordUpsertOne) DoNothing() *ETCRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ETCRecordCreate.OnConflict
// documentation for more info.
func (u *ETCRecordUpsertOne) Update(set func(*ETCRecordUpsert)) *ETCRecordUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ETCRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *ETCRecordUpsertOne) SetUsername(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateUsername() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateUsername()
	})
}

// SetEntry sets the "entry" field.
func (u *ETCRecordUpsertOne) SetEntry(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntry(v)
	})
}

// UpdateEntry sets the "entry" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateEntry() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntry()
	})
}

// SetEntryYear sets the "entry_year" field.
func (u *ETCRecordUpsertOne) SetEntryYear(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryYear(v)
	})
}

// AddEntryYear adds v to the "entry_year" field.
func (u *ETCRecordUpsertOne) AddEntryYear(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryYear(v)
	})
}

// UpdateEntryYear sets the "entry_year" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateEntryYear() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryYear()
	})
}

// SetEntryMonth sets the "entry_month" field.
func (u *ETCRecordUpsertOne) SetEntryMonth(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryMonth(v)
	})
}

// AddEntryMonth adds v to the "entry_month" field.
func (u *ETCRecordUpsertOne) AddEntryMonth(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryMonth(v)
	})
}

// UpdateEntryMonth sets the "entry_month" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateEntryMonth() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryMonth()
	})
}

// SetEntryDay sets the "entry_day" field.
func (u *ETCRecordUpsertOne) SetEntryDay(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryDay(v)
	})
}

// AddEntryDay adds v to the "entry_day" field.
func (u *ETCRecordUpsertOne) AddEntryDay(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryDay(v)
	})
}

// UpdateEntryDay sets the "entry_day" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateEntryDay() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryDay()
	})
}

// SetExit sets the "exit" field.
func (u *ETCRecordUpsertOne) SetExit(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExit(v)
	})
}

// UpdateExit sets the "exit" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateExit() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExit()
	})
}

// SetExitDate sets the "exit_date" field.
func (u *ETCRecordUpsertOne) SetExitDate(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExitDate(v)
	})
}

// UpdateExitDate sets the "exit_date" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateExitDate() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExitDate()
	})
}

// SetExitTime sets the "exit_time" field.
func (u *ETCRecordUpsertOne) SetExitTime(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExitTime(v)
	})
}

// UpdateExitTime sets the "exit_time" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateExitTime() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExitTime()
	})
}

// SetTotalPrice sets the "total_price" field.
func (u *ETCRecordUpsertOne) SetTotalPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetTotalPrice(v)
	})
}

// AddTotalPrice adds v to the "total_price" field.
func (u *ETCRecordUpsertOne) AddTotalPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddTotalPrice(v)
	})
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateTotalPrice() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateTotalPrice()
	})
}

// SetDiscountPrice sets the "discount_price" field.
func (u *ETCRecordUpsertOne) SetDiscountPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetDiscountPrice(v)
	})
}

// AddDiscountPrice adds v to the "discount_price" field.
func (u *ETCRecordUpsertOne) AddDiscountPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddDiscountPrice(v)
	})
}

// UpdateDiscountPrice sets the "discount_price" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateDiscountPrice() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateDiscountPrice()
	})
}

// SetPaidPrice sets the "paid_price" field.
func (u *ETCRecordUpsertOne) SetPaidPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetPaidPrice(v)
	})
}

// AddPaidPrice adds v to the "paid_price" field.
func (u *ETCRecordUpsertOne) AddPaidPrice(v int32) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddPaidPrice(v)
	})
}

// UpdatePaidPrice sets the "paid_price" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdatePaidPrice() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdatePaidPrice()
	})
}

// SetCarType sets the "car_type" field.
func (u *ETCRecordUpsertOne) SetCarType(v int8) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCarType(v)
	})
}

// AddCarType adds v to the "car_type" field.
func (u *ETCRecordUpsertOne) AddCarType(v int8) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddCarType(v)
	})
}

// UpdateCarType sets the "car_type" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateCarType() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCarType()
	})
}

// SetCarNumber sets the "car_number" field.
func (u *ETCRecordUpsertOne) SetCarNumber(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCarNumber(v)
	})
}

// UpdateCarNumber sets the "car_number" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateCarNumber() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCarNumber()
	})
}

// SetCardNumber sets the "card_number" field.
func (u *ETCRecordUpsertOne) SetCardNumber(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCardNumber(v)
	})
}

// UpdateCardNumber sets the "card_number" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateCardNumber() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCardNumber()
	})
}

// SetStatus sets the "status" field.
func (u *ETCRecordUpsertOne) SetStatus(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateStatus() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetComment sets the "comment" field.
func (u *ETCRecordUpsertOne) SetComment(v string) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateComment() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ETCRecordUpsertOne) ClearComment() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.ClearComment()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ETCRecordUpsertOne) SetCreatedAt(v time.Time) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateCreatedAt() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ETCRecordUpsertOne) SetUpdatedAt(v time.Time) *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ETCRecordUpsertOne) UpdateUpdatedAt() *ETCRecordUpsertOne {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ETCRecordUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ETCRecordCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ETCRecordUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ETCRecordUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ETCRecordUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ETCRecordCreateBulk is the builder for creating many ETCRecord entities in bulk.
type ETCRecordCreateBulk struct {
	config
	builders []*ETCRecordCreate
	conflict []sql.ConflictOption
}

// Save creates the ETCRecord entities in the database.
func (ercb *ETCRecordCreateBulk) Save(ctx context.Context) ([]*ETCRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ercb.builders))
	nodes := make([]*ETCRecord, len(ercb.builders))
	mutators := make([]Mutator, len(ercb.builders))
	for i := range ercb.builders {
		func(i int, root context.Context) {
			builder := ercb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ETCRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ercb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ercb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ercb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ercb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ercb *ETCRecordCreateBulk) SaveX(ctx context.Context) []*ETCRecord {
	v, err := ercb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ercb *ETCRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := ercb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ercb *ETCRecordCreateBulk) ExecX(ctx context.Context) {
	if err := ercb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ETCRecord.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ETCRecordUpsert) {
//			SetUsername(v+v).
//		}).
//		Exec(ctx)
func (ercb *ETCRecordCreateBulk) OnConflict(opts ...sql.ConflictOption) *ETCRecordUpsertBulk {
	ercb.conflict = opts
	return &ETCRecordUpsertBulk{
		create: ercb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ercb *ETCRecordCreateBulk) OnConflictColumns(columns ...string) *ETCRecordUpsertBulk {
	ercb.conflict = append(ercb.conflict, sql.ConflictColumns(columns...))
	return &ETCRecordUpsertBulk{
		create: ercb,
	}
}

// ETCRecordUpsertBulk is the builder for "upsert"-ing
// a bulk of ETCRecord nodes.
type ETCRecordUpsertBulk struct {
	create *ETCRecordCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(etcrecord.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ETCRecordUpsertBulk) UpdateNewValues() *ETCRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(etcrecord.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ETCRecord.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ETCRecordUpsertBulk) Ignore() *ETCRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ETCRecordUpsertBulk) DoNothing() *ETCRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ETCRecordCreateBulk.OnConflict
// documentation for more info.
func (u *ETCRecordUpsertBulk) Update(set func(*ETCRecordUpsert)) *ETCRecordUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ETCRecordUpsert{UpdateSet: update})
	}))
	return u
}

// SetUsername sets the "username" field.
func (u *ETCRecordUpsertBulk) SetUsername(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateUsername() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateUsername()
	})
}

// SetEntry sets the "entry" field.
func (u *ETCRecordUpsertBulk) SetEntry(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntry(v)
	})
}

// UpdateEntry sets the "entry" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateEntry() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntry()
	})
}

// SetEntryYear sets the "entry_year" field.
func (u *ETCRecordUpsertBulk) SetEntryYear(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryYear(v)
	})
}

// AddEntryYear adds v to the "entry_year" field.
func (u *ETCRecordUpsertBulk) AddEntryYear(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryYear(v)
	})
}

// UpdateEntryYear sets the "entry_year" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateEntryYear() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryYear()
	})
}

// SetEntryMonth sets the "entry_month" field.
func (u *ETCRecordUpsertBulk) SetEntryMonth(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryMonth(v)
	})
}

// AddEntryMonth adds v to the "entry_month" field.
func (u *ETCRecordUpsertBulk) AddEntryMonth(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryMonth(v)
	})
}

// UpdateEntryMonth sets the "entry_month" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateEntryMonth() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryMonth()
	})
}

// SetEntryDay sets the "entry_day" field.
func (u *ETCRecordUpsertBulk) SetEntryDay(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetEntryDay(v)
	})
}

// AddEntryDay adds v to the "entry_day" field.
func (u *ETCRecordUpsertBulk) AddEntryDay(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddEntryDay(v)
	})
}

// UpdateEntryDay sets the "entry_day" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateEntryDay() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateEntryDay()
	})
}

// SetExit sets the "exit" field.
func (u *ETCRecordUpsertBulk) SetExit(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExit(v)
	})
}

// UpdateExit sets the "exit" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateExit() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExit()
	})
}

// SetExitDate sets the "exit_date" field.
func (u *ETCRecordUpsertBulk) SetExitDate(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExitDate(v)
	})
}

// UpdateExitDate sets the "exit_date" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateExitDate() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExitDate()
	})
}

// SetExitTime sets the "exit_time" field.
func (u *ETCRecordUpsertBulk) SetExitTime(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetExitTime(v)
	})
}

// UpdateExitTime sets the "exit_time" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateExitTime() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateExitTime()
	})
}

// SetTotalPrice sets the "total_price" field.
func (u *ETCRecordUpsertBulk) SetTotalPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetTotalPrice(v)
	})
}

// AddTotalPrice adds v to the "total_price" field.
func (u *ETCRecordUpsertBulk) AddTotalPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddTotalPrice(v)
	})
}

// UpdateTotalPrice sets the "total_price" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateTotalPrice() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateTotalPrice()
	})
}

// SetDiscountPrice sets the "discount_price" field.
func (u *ETCRecordUpsertBulk) SetDiscountPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetDiscountPrice(v)
	})
}

// AddDiscountPrice adds v to the "discount_price" field.
func (u *ETCRecordUpsertBulk) AddDiscountPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddDiscountPrice(v)
	})
}

// UpdateDiscountPrice sets the "discount_price" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateDiscountPrice() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateDiscountPrice()
	})
}

// SetPaidPrice sets the "paid_price" field.
func (u *ETCRecordUpsertBulk) SetPaidPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetPaidPrice(v)
	})
}

// AddPaidPrice adds v to the "paid_price" field.
func (u *ETCRecordUpsertBulk) AddPaidPrice(v int32) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddPaidPrice(v)
	})
}

// UpdatePaidPrice sets the "paid_price" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdatePaidPrice() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdatePaidPrice()
	})
}

// SetCarType sets the "car_type" field.
func (u *ETCRecordUpsertBulk) SetCarType(v int8) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCarType(v)
	})
}

// AddCarType adds v to the "car_type" field.
func (u *ETCRecordUpsertBulk) AddCarType(v int8) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.AddCarType(v)
	})
}

// UpdateCarType sets the "car_type" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateCarType() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCarType()
	})
}

// SetCarNumber sets the "car_number" field.
func (u *ETCRecordUpsertBulk) SetCarNumber(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCarNumber(v)
	})
}

// UpdateCarNumber sets the "car_number" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateCarNumber() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCarNumber()
	})
}

// SetCardNumber sets the "card_number" field.
func (u *ETCRecordUpsertBulk) SetCardNumber(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCardNumber(v)
	})
}

// UpdateCardNumber sets the "card_number" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateCardNumber() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCardNumber()
	})
}

// SetStatus sets the "status" field.
func (u *ETCRecordUpsertBulk) SetStatus(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateStatus() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateStatus()
	})
}

// SetComment sets the "comment" field.
func (u *ETCRecordUpsertBulk) SetComment(v string) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetComment(v)
	})
}

// UpdateComment sets the "comment" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateComment() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateComment()
	})
}

// ClearComment clears the value of the "comment" field.
func (u *ETCRecordUpsertBulk) ClearComment() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.ClearComment()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ETCRecordUpsertBulk) SetCreatedAt(v time.Time) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateCreatedAt() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ETCRecordUpsertBulk) SetUpdatedAt(v time.Time) *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ETCRecordUpsertBulk) UpdateUpdatedAt() *ETCRecordUpsertBulk {
	return u.Update(func(s *ETCRecordUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *ETCRecordUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ETCRecordCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ETCRecordCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ETCRecordUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

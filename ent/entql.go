// Code generated by ent, DO NOT EDIT.

package ent

import (
	"myetc.lantron.ltd/m/ent/etcrecord"
	"myetc.lantron.ltd/m/ent/etcsyncrecord"
	"myetc.lantron.ltd/m/ent/etcuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   etcrecord.Table,
			Columns: etcrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcrecord.FieldID,
			},
		},
		Type: "ETCRecord",
		Fields: map[string]*sqlgraph.FieldSpec{
			etcrecord.FieldUsername:      {Type: field.TypeString, Column: etcrecord.FieldUsername},
			etcrecord.FieldEntry:         {Type: field.TypeString, Column: etcrecord.FieldEntry},
			etcrecord.FieldEntryYear:     {Type: field.TypeInt32, Column: etcrecord.FieldEntryYear},
			etcrecord.FieldEntryMonth:    {Type: field.TypeInt32, Column: etcrecord.FieldEntryMonth},
			etcrecord.FieldEntryDay:      {Type: field.TypeInt32, Column: etcrecord.FieldEntryDay},
			etcrecord.FieldExit:          {Type: field.TypeString, Column: etcrecord.FieldExit},
			etcrecord.FieldExitDate:      {Type: field.TypeString, Column: etcrecord.FieldExitDate},
			etcrecord.FieldExitTime:      {Type: field.TypeString, Column: etcrecord.FieldExitTime},
			etcrecord.FieldTotalPrice:    {Type: field.TypeInt32, Column: etcrecord.FieldTotalPrice},
			etcrecord.FieldDiscountPrice: {Type: field.TypeInt32, Column: etcrecord.FieldDiscountPrice},
			etcrecord.FieldPaidPrice:     {Type: field.TypeInt32, Column: etcrecord.FieldPaidPrice},
			etcrecord.FieldCarType:       {Type: field.TypeInt8, Column: etcrecord.FieldCarType},
			etcrecord.FieldCarNumber:     {Type: field.TypeString, Column: etcrecord.FieldCarNumber},
			etcrecord.FieldCardNumber:    {Type: field.TypeString, Column: etcrecord.FieldCardNumber},
			etcrecord.FieldStatus:        {Type: field.TypeString, Column: etcrecord.FieldStatus},
			etcrecord.FieldComment:       {Type: field.TypeString, Column: etcrecord.FieldComment},
			etcrecord.FieldCreatedAt:     {Type: field.TypeTime, Column: etcrecord.FieldCreatedAt},
			etcrecord.FieldUpdatedAt:     {Type: field.TypeTime, Column: etcrecord.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   etcsyncrecord.Table,
			Columns: etcsyncrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcsyncrecord.FieldID,
			},
		},
		Type: "ETCSyncRecord",
		Fields: map[string]*sqlgraph.FieldSpec{
			etcsyncrecord.FieldUsername:  {Type: field.TypeString, Column: etcsyncrecord.FieldUsername},
			etcsyncrecord.FieldSyncData:  {Type: field.TypeString, Column: etcsyncrecord.FieldSyncData},
			etcsyncrecord.FieldCreatedAt: {Type: field.TypeTime, Column: etcsyncrecord.FieldCreatedAt},
			etcsyncrecord.FieldUpdatedAt: {Type: field.TypeTime, Column: etcsyncrecord.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   etcuser.Table,
			Columns: etcuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcuser.FieldID,
			},
		},
		Type: "ETCUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			etcuser.FieldEtcUsername:   {Type: field.TypeInt64, Column: etcuser.FieldEtcUsername},
			etcuser.FieldEtcPassword:   {Type: field.TypeString, Column: etcuser.FieldEtcPassword},
			etcuser.FieldPointUsername: {Type: field.TypeString, Column: etcuser.FieldPointUsername},
			etcuser.FieldPointPassword: {Type: field.TypeString, Column: etcuser.FieldPointPassword},
			etcuser.FieldCreatedAt:     {Type: field.TypeTime, Column: etcuser.FieldCreatedAt},
			etcuser.FieldUpdatedAt:     {Type: field.TypeTime, Column: etcuser.FieldUpdatedAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (erq *ETCRecordQuery) addPredicate(pred func(s *sql.Selector)) {
	erq.predicates = append(erq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ETCRecordQuery builder.
func (erq *ETCRecordQuery) Filter() *ETCRecordFilter {
	return &ETCRecordFilter{config: erq.config, predicateAdder: erq}
}

// addPredicate implements the predicateAdder interface.
func (m *ETCRecordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ETCRecordMutation builder.
func (m *ETCRecordMutation) Filter() *ETCRecordFilter {
	return &ETCRecordFilter{config: m.config, predicateAdder: m}
}

// ETCRecordFilter provides a generic filtering capability at runtime for ETCRecordQuery.
type ETCRecordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ETCRecordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ETCRecordFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(etcrecord.FieldID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *ETCRecordFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldUsername))
}

// WhereEntry applies the entql string predicate on the entry field.
func (f *ETCRecordFilter) WhereEntry(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldEntry))
}

// WhereEntryYear applies the entql int32 predicate on the entry_year field.
func (f *ETCRecordFilter) WhereEntryYear(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldEntryYear))
}

// WhereEntryMonth applies the entql int32 predicate on the entry_month field.
func (f *ETCRecordFilter) WhereEntryMonth(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldEntryMonth))
}

// WhereEntryDay applies the entql int32 predicate on the entry_day field.
func (f *ETCRecordFilter) WhereEntryDay(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldEntryDay))
}

// WhereExit applies the entql string predicate on the exit field.
func (f *ETCRecordFilter) WhereExit(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldExit))
}

// WhereExitDate applies the entql string predicate on the exit_date field.
func (f *ETCRecordFilter) WhereExitDate(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldExitDate))
}

// WhereExitTime applies the entql string predicate on the exit_time field.
func (f *ETCRecordFilter) WhereExitTime(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldExitTime))
}

// WhereTotalPrice applies the entql int32 predicate on the total_price field.
func (f *ETCRecordFilter) WhereTotalPrice(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldTotalPrice))
}

// WhereDiscountPrice applies the entql int32 predicate on the discount_price field.
func (f *ETCRecordFilter) WhereDiscountPrice(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldDiscountPrice))
}

// WherePaidPrice applies the entql int32 predicate on the paid_price field.
func (f *ETCRecordFilter) WherePaidPrice(p entql.Int32P) {
	f.Where(p.Field(etcrecord.FieldPaidPrice))
}

// WhereCarType applies the entql int8 predicate on the car_type field.
func (f *ETCRecordFilter) WhereCarType(p entql.Int8P) {
	f.Where(p.Field(etcrecord.FieldCarType))
}

// WhereCarNumber applies the entql string predicate on the car_number field.
func (f *ETCRecordFilter) WhereCarNumber(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldCarNumber))
}

// WhereCardNumber applies the entql string predicate on the card_number field.
func (f *ETCRecordFilter) WhereCardNumber(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldCardNumber))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ETCRecordFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldStatus))
}

// WhereComment applies the entql string predicate on the comment field.
func (f *ETCRecordFilter) WhereComment(p entql.StringP) {
	f.Where(p.Field(etcrecord.FieldComment))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ETCRecordFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(etcrecord.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ETCRecordFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(etcrecord.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (esrq *ETCSyncRecordQuery) addPredicate(pred func(s *sql.Selector)) {
	esrq.predicates = append(esrq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ETCSyncRecordQuery builder.
func (esrq *ETCSyncRecordQuery) Filter() *ETCSyncRecordFilter {
	return &ETCSyncRecordFilter{config: esrq.config, predicateAdder: esrq}
}

// addPredicate implements the predicateAdder interface.
func (m *ETCSyncRecordMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ETCSyncRecordMutation builder.
func (m *ETCSyncRecordMutation) Filter() *ETCSyncRecordFilter {
	return &ETCSyncRecordFilter{config: m.config, predicateAdder: m}
}

// ETCSyncRecordFilter provides a generic filtering capability at runtime for ETCSyncRecordQuery.
type ETCSyncRecordFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ETCSyncRecordFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ETCSyncRecordFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(etcsyncrecord.FieldID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *ETCSyncRecordFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(etcsyncrecord.FieldUsername))
}

// WhereSyncData applies the entql string predicate on the sync_data field.
func (f *ETCSyncRecordFilter) WhereSyncData(p entql.StringP) {
	f.Where(p.Field(etcsyncrecord.FieldSyncData))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ETCSyncRecordFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(etcsyncrecord.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ETCSyncRecordFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(etcsyncrecord.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (euq *ETCUserQuery) addPredicate(pred func(s *sql.Selector)) {
	euq.predicates = append(euq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ETCUserQuery builder.
func (euq *ETCUserQuery) Filter() *ETCUserFilter {
	return &ETCUserFilter{config: euq.config, predicateAdder: euq}
}

// addPredicate implements the predicateAdder interface.
func (m *ETCUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ETCUserMutation builder.
func (m *ETCUserMutation) Filter() *ETCUserFilter {
	return &ETCUserFilter{config: m.config, predicateAdder: m}
}

// ETCUserFilter provides a generic filtering capability at runtime for ETCUserQuery.
type ETCUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ETCUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *ETCUserFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(etcuser.FieldID))
}

// WhereEtcUsername applies the entql int64 predicate on the etc_username field.
func (f *ETCUserFilter) WhereEtcUsername(p entql.Int64P) {
	f.Where(p.Field(etcuser.FieldEtcUsername))
}

// WhereEtcPassword applies the entql string predicate on the etc_password field.
func (f *ETCUserFilter) WhereEtcPassword(p entql.StringP) {
	f.Where(p.Field(etcuser.FieldEtcPassword))
}

// WherePointUsername applies the entql string predicate on the point_username field.
func (f *ETCUserFilter) WherePointUsername(p entql.StringP) {
	f.Where(p.Field(etcuser.FieldPointUsername))
}

// WherePointPassword applies the entql string predicate on the point_password field.
func (f *ETCUserFilter) WherePointPassword(p entql.StringP) {
	f.Where(p.Field(etcuser.FieldPointPassword))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ETCUserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(etcuser.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ETCUserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(etcuser.FieldUpdatedAt))
}

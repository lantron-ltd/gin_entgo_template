// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"myetc.lantron.ltd/m/ent/etcsyncrecord"
	"myetc.lantron.ltd/m/ent/predicate"
)

// ETCSyncRecordUpdate is the builder for updating ETCSyncRecord entities.
type ETCSyncRecordUpdate struct {
	config
	hooks     []Hook
	mutation  *ETCSyncRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ETCSyncRecordUpdate builder.
func (esru *ETCSyncRecordUpdate) Where(ps ...predicate.ETCSyncRecord) *ETCSyncRecordUpdate {
	esru.mutation.Where(ps...)
	return esru
}

// SetUsername sets the "username" field.
func (esru *ETCSyncRecordUpdate) SetUsername(s string) *ETCSyncRecordUpdate {
	esru.mutation.SetUsername(s)
	return esru
}

// SetSyncData sets the "sync_data" field.
func (esru *ETCSyncRecordUpdate) SetSyncData(s string) *ETCSyncRecordUpdate {
	esru.mutation.SetSyncData(s)
	return esru
}

// SetCreatedAt sets the "created_at" field.
func (esru *ETCSyncRecordUpdate) SetCreatedAt(t time.Time) *ETCSyncRecordUpdate {
	esru.mutation.SetCreatedAt(t)
	return esru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esru *ETCSyncRecordUpdate) SetNillableCreatedAt(t *time.Time) *ETCSyncRecordUpdate {
	if t != nil {
		esru.SetCreatedAt(*t)
	}
	return esru
}

// SetUpdatedAt sets the "updated_at" field.
func (esru *ETCSyncRecordUpdate) SetUpdatedAt(t time.Time) *ETCSyncRecordUpdate {
	esru.mutation.SetUpdatedAt(t)
	return esru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esru *ETCSyncRecordUpdate) SetNillableUpdatedAt(t *time.Time) *ETCSyncRecordUpdate {
	if t != nil {
		esru.SetUpdatedAt(*t)
	}
	return esru
}

// Mutation returns the ETCSyncRecordMutation object of the builder.
func (esru *ETCSyncRecordUpdate) Mutation() *ETCSyncRecordMutation {
	return esru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esru *ETCSyncRecordUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(esru.hooks) == 0 {
		affected, err = esru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCSyncRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esru.mutation = mutation
			affected, err = esru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esru.hooks) - 1; i >= 0; i-- {
			if esru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esru *ETCSyncRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := esru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esru *ETCSyncRecordUpdate) Exec(ctx context.Context) error {
	_, err := esru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esru *ETCSyncRecordUpdate) ExecX(ctx context.Context) {
	if err := esru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esru *ETCSyncRecordUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCSyncRecordUpdate {
	esru.modifiers = append(esru.modifiers, modifiers...)
	return esru
}

func (esru *ETCSyncRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcsyncrecord.Table,
			Columns: etcsyncrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcsyncrecord.FieldID,
			},
		},
	}
	if ps := esru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esru.mutation.Username(); ok {
		_spec.SetField(etcsyncrecord.FieldUsername, field.TypeString, value)
	}
	if value, ok := esru.mutation.SyncData(); ok {
		_spec.SetField(etcsyncrecord.FieldSyncData, field.TypeString, value)
	}
	if value, ok := esru.mutation.CreatedAt(); ok {
		_spec.SetField(etcsyncrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := esru.mutation.UpdatedAt(); ok {
		_spec.SetField(etcsyncrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(esru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, esru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcsyncrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ETCSyncRecordUpdateOne is the builder for updating a single ETCSyncRecord entity.
type ETCSyncRecordUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ETCSyncRecordMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUsername sets the "username" field.
func (esruo *ETCSyncRecordUpdateOne) SetUsername(s string) *ETCSyncRecordUpdateOne {
	esruo.mutation.SetUsername(s)
	return esruo
}

// SetSyncData sets the "sync_data" field.
func (esruo *ETCSyncRecordUpdateOne) SetSyncData(s string) *ETCSyncRecordUpdateOne {
	esruo.mutation.SetSyncData(s)
	return esruo
}

// SetCreatedAt sets the "created_at" field.
func (esruo *ETCSyncRecordUpdateOne) SetCreatedAt(t time.Time) *ETCSyncRecordUpdateOne {
	esruo.mutation.SetCreatedAt(t)
	return esruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (esruo *ETCSyncRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *ETCSyncRecordUpdateOne {
	if t != nil {
		esruo.SetCreatedAt(*t)
	}
	return esruo
}

// SetUpdatedAt sets the "updated_at" field.
func (esruo *ETCSyncRecordUpdateOne) SetUpdatedAt(t time.Time) *ETCSyncRecordUpdateOne {
	esruo.mutation.SetUpdatedAt(t)
	return esruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (esruo *ETCSyncRecordUpdateOne) SetNillableUpdatedAt(t *time.Time) *ETCSyncRecordUpdateOne {
	if t != nil {
		esruo.SetUpdatedAt(*t)
	}
	return esruo
}

// Mutation returns the ETCSyncRecordMutation object of the builder.
func (esruo *ETCSyncRecordUpdateOne) Mutation() *ETCSyncRecordMutation {
	return esruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esruo *ETCSyncRecordUpdateOne) Select(field string, fields ...string) *ETCSyncRecordUpdateOne {
	esruo.fields = append([]string{field}, fields...)
	return esruo
}

// Save executes the query and returns the updated ETCSyncRecord entity.
func (esruo *ETCSyncRecordUpdateOne) Save(ctx context.Context) (*ETCSyncRecord, error) {
	var (
		err  error
		node *ETCSyncRecord
	)
	if len(esruo.hooks) == 0 {
		node, err = esruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCSyncRecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			esruo.mutation = mutation
			node, err = esruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esruo.hooks) - 1; i >= 0; i-- {
			if esruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ETCSyncRecord)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ETCSyncRecordMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esruo *ETCSyncRecordUpdateOne) SaveX(ctx context.Context) *ETCSyncRecord {
	node, err := esruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esruo *ETCSyncRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := esruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esruo *ETCSyncRecordUpdateOne) ExecX(ctx context.Context) {
	if err := esruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (esruo *ETCSyncRecordUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCSyncRecordUpdateOne {
	esruo.modifiers = append(esruo.modifiers, modifiers...)
	return esruo
}

func (esruo *ETCSyncRecordUpdateOne) sqlSave(ctx context.Context) (_node *ETCSyncRecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcsyncrecord.Table,
			Columns: etcsyncrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcsyncrecord.FieldID,
			},
		},
	}
	id, ok := esruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ETCSyncRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, etcsyncrecord.FieldID)
		for _, f := range fields {
			if !etcsyncrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != etcsyncrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esruo.mutation.Username(); ok {
		_spec.SetField(etcsyncrecord.FieldUsername, field.TypeString, value)
	}
	if value, ok := esruo.mutation.SyncData(); ok {
		_spec.SetField(etcsyncrecord.FieldSyncData, field.TypeString, value)
	}
	if value, ok := esruo.mutation.CreatedAt(); ok {
		_spec.SetField(etcsyncrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := esruo.mutation.UpdatedAt(); ok {
		_spec.SetField(etcsyncrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(esruo.modifiers...)
	_node = &ETCSyncRecord{config: esruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcsyncrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"myetc.lantron.ltd/m/ent/etcuser"
	"myetc.lantron.ltd/m/ent/predicate"
)

// ETCUserUpdate is the builder for updating ETCUser entities.
type ETCUserUpdate struct {
	config
	hooks     []Hook
	mutation  *ETCUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ETCUserUpdate builder.
func (euu *ETCUserUpdate) Where(ps ...predicate.ETCUser) *ETCUserUpdate {
	euu.mutation.Where(ps...)
	return euu
}

// SetEtcUsername sets the "etc_username" field.
func (euu *ETCUserUpdate) SetEtcUsername(i int64) *ETCUserUpdate {
	euu.mutation.ResetEtcUsername()
	euu.mutation.SetEtcUsername(i)
	return euu
}

// AddEtcUsername adds i to the "etc_username" field.
func (euu *ETCUserUpdate) AddEtcUsername(i int64) *ETCUserUpdate {
	euu.mutation.AddEtcUsername(i)
	return euu
}

// SetEtcPassword sets the "etc_password" field.
func (euu *ETCUserUpdate) SetEtcPassword(s string) *ETCUserUpdate {
	euu.mutation.SetEtcPassword(s)
	return euu
}

// SetPointUsername sets the "point_username" field.
func (euu *ETCUserUpdate) SetPointUsername(s string) *ETCUserUpdate {
	euu.mutation.SetPointUsername(s)
	return euu
}

// SetPointPassword sets the "point_password" field.
func (euu *ETCUserUpdate) SetPointPassword(s string) *ETCUserUpdate {
	euu.mutation.SetPointPassword(s)
	return euu
}

// SetCreatedAt sets the "created_at" field.
func (euu *ETCUserUpdate) SetCreatedAt(t time.Time) *ETCUserUpdate {
	euu.mutation.SetCreatedAt(t)
	return euu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euu *ETCUserUpdate) SetNillableCreatedAt(t *time.Time) *ETCUserUpdate {
	if t != nil {
		euu.SetCreatedAt(*t)
	}
	return euu
}

// SetUpdatedAt sets the "updated_at" field.
func (euu *ETCUserUpdate) SetUpdatedAt(t time.Time) *ETCUserUpdate {
	euu.mutation.SetUpdatedAt(t)
	return euu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euu *ETCUserUpdate) SetNillableUpdatedAt(t *time.Time) *ETCUserUpdate {
	if t != nil {
		euu.SetUpdatedAt(*t)
	}
	return euu
}

// Mutation returns the ETCUserMutation object of the builder.
func (euu *ETCUserUpdate) Mutation() *ETCUserMutation {
	return euu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (euu *ETCUserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(euu.hooks) == 0 {
		affected, err = euu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euu.mutation = mutation
			affected, err = euu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(euu.hooks) - 1; i >= 0; i-- {
			if euu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (euu *ETCUserUpdate) SaveX(ctx context.Context) int {
	affected, err := euu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (euu *ETCUserUpdate) Exec(ctx context.Context) error {
	_, err := euu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euu *ETCUserUpdate) ExecX(ctx context.Context) {
	if err := euu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euu *ETCUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCUserUpdate {
	euu.modifiers = append(euu.modifiers, modifiers...)
	return euu
}

func (euu *ETCUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcuser.Table,
			Columns: etcuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcuser.FieldID,
			},
		},
	}
	if ps := euu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euu.mutation.EtcUsername(); ok {
		_spec.SetField(etcuser.FieldEtcUsername, field.TypeInt64, value)
	}
	if value, ok := euu.mutation.AddedEtcUsername(); ok {
		_spec.AddField(etcuser.FieldEtcUsername, field.TypeInt64, value)
	}
	if value, ok := euu.mutation.EtcPassword(); ok {
		_spec.SetField(etcuser.FieldEtcPassword, field.TypeString, value)
	}
	if value, ok := euu.mutation.PointUsername(); ok {
		_spec.SetField(etcuser.FieldPointUsername, field.TypeString, value)
	}
	if value, ok := euu.mutation.PointPassword(); ok {
		_spec.SetField(etcuser.FieldPointPassword, field.TypeString, value)
	}
	if value, ok := euu.mutation.CreatedAt(); ok {
		_spec.SetField(etcuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euu.mutation.UpdatedAt(); ok {
		_spec.SetField(etcuser.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(euu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, euu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ETCUserUpdateOne is the builder for updating a single ETCUser entity.
type ETCUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ETCUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEtcUsername sets the "etc_username" field.
func (euuo *ETCUserUpdateOne) SetEtcUsername(i int64) *ETCUserUpdateOne {
	euuo.mutation.ResetEtcUsername()
	euuo.mutation.SetEtcUsername(i)
	return euuo
}

// AddEtcUsername adds i to the "etc_username" field.
func (euuo *ETCUserUpdateOne) AddEtcUsername(i int64) *ETCUserUpdateOne {
	euuo.mutation.AddEtcUsername(i)
	return euuo
}

// SetEtcPassword sets the "etc_password" field.
func (euuo *ETCUserUpdateOne) SetEtcPassword(s string) *ETCUserUpdateOne {
	euuo.mutation.SetEtcPassword(s)
	return euuo
}

// SetPointUsername sets the "point_username" field.
func (euuo *ETCUserUpdateOne) SetPointUsername(s string) *ETCUserUpdateOne {
	euuo.mutation.SetPointUsername(s)
	return euuo
}

// SetPointPassword sets the "point_password" field.
func (euuo *ETCUserUpdateOne) SetPointPassword(s string) *ETCUserUpdateOne {
	euuo.mutation.SetPointPassword(s)
	return euuo
}

// SetCreatedAt sets the "created_at" field.
func (euuo *ETCUserUpdateOne) SetCreatedAt(t time.Time) *ETCUserUpdateOne {
	euuo.mutation.SetCreatedAt(t)
	return euuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euuo *ETCUserUpdateOne) SetNillableCreatedAt(t *time.Time) *ETCUserUpdateOne {
	if t != nil {
		euuo.SetCreatedAt(*t)
	}
	return euuo
}

// SetUpdatedAt sets the "updated_at" field.
func (euuo *ETCUserUpdateOne) SetUpdatedAt(t time.Time) *ETCUserUpdateOne {
	euuo.mutation.SetUpdatedAt(t)
	return euuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euuo *ETCUserUpdateOne) SetNillableUpdatedAt(t *time.Time) *ETCUserUpdateOne {
	if t != nil {
		euuo.SetUpdatedAt(*t)
	}
	return euuo
}

// Mutation returns the ETCUserMutation object of the builder.
func (euuo *ETCUserUpdateOne) Mutation() *ETCUserMutation {
	return euuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euuo *ETCUserUpdateOne) Select(field string, fields ...string) *ETCUserUpdateOne {
	euuo.fields = append([]string{field}, fields...)
	return euuo
}

// Save executes the query and returns the updated ETCUser entity.
func (euuo *ETCUserUpdateOne) Save(ctx context.Context) (*ETCUser, error) {
	var (
		err  error
		node *ETCUser
	)
	if len(euuo.hooks) == 0 {
		node, err = euuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ETCUserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euuo.mutation = mutation
			node, err = euuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euuo.hooks) - 1; i >= 0; i-- {
			if euuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ETCUser)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ETCUserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euuo *ETCUserUpdateOne) SaveX(ctx context.Context) *ETCUser {
	node, err := euuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euuo *ETCUserUpdateOne) Exec(ctx context.Context) error {
	_, err := euuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euuo *ETCUserUpdateOne) ExecX(ctx context.Context) {
	if err := euuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euuo *ETCUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ETCUserUpdateOne {
	euuo.modifiers = append(euuo.modifiers, modifiers...)
	return euuo
}

func (euuo *ETCUserUpdateOne) sqlSave(ctx context.Context) (_node *ETCUser, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   etcuser.Table,
			Columns: etcuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: etcuser.FieldID,
			},
		},
	}
	id, ok := euuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ETCUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, etcuser.FieldID)
		for _, f := range fields {
			if !etcuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != etcuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euuo.mutation.EtcUsername(); ok {
		_spec.SetField(etcuser.FieldEtcUsername, field.TypeInt64, value)
	}
	if value, ok := euuo.mutation.AddedEtcUsername(); ok {
		_spec.AddField(etcuser.FieldEtcUsername, field.TypeInt64, value)
	}
	if value, ok := euuo.mutation.EtcPassword(); ok {
		_spec.SetField(etcuser.FieldEtcPassword, field.TypeString, value)
	}
	if value, ok := euuo.mutation.PointUsername(); ok {
		_spec.SetField(etcuser.FieldPointUsername, field.TypeString, value)
	}
	if value, ok := euuo.mutation.PointPassword(); ok {
		_spec.SetField(etcuser.FieldPointPassword, field.TypeString, value)
	}
	if value, ok := euuo.mutation.CreatedAt(); ok {
		_spec.SetField(etcuser.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := euuo.mutation.UpdatedAt(); ok {
		_spec.SetField(etcuser.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(euuo.modifiers...)
	_node = &ETCUser{config: euuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{etcuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
